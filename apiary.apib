FORMAT: 1A
HOST: http://private-4e69c-nihimoto1.apiary-mock.com/

# toast music

試し書き中

クロール側DBについては下記を参照  
https://github.com/toast-id/toast-crawl-manager/wiki/%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%AB%E9%96%A2%E9%80%A3DB%E3%81%AE%E8%AA%AC%E6%98%8E

クロール側DBを元にしているがweb用にカスタマイズされる予定

## SampleError [/v1/error]

## エラー発生時のResponseサンプル[GET]
エラーが発生したときは全エンドポイントで下記の共通フォーマットで返却する。内容はエラー次第だが形式は統一する


+ Request

+ Response 404 (application/json)
    + Attributes
        - error(error)


## Login [/v1/users/token]

## Login [/v1/users/signin/twitter]

### Login by Twitter [POST]
ツイッターのトークンでログインもしくは登録をする。

+ Request
    + Attributes
        + access_token: `xxxxxxx` (string) - twitterから取得したaccess token
        + `access_token_secret`: `xxxxxxx` (string) - twitterから取得した access token_secret

+ Response 200 (application/json)
    + Headers
    + Attributes(userWithToken)


## User [/v1/users/{id}]

### get user [GET]
指定したユーザーの情報を返す

+ Parameters
    + id: `999` (number) - ユーザーID

+ Response 200 (application/json)
    + Attributes(user)

## User/Me [/v1/users/me]

### get me [GET]
ログインしているユーザーの情報を返す

+ Response 200 (application/json)
    + Attributes(user)

### put me [PUT]
ログインしているユーザーの情報を変更する

+ Response 200 (application/json)
    + Attributes(userEdit)


## User Lives [/v1/users/me/lives]

### list User Live [GET]
ログイン中のユーザーが参加するorしたライブ一覧を取得

+ Request
    + Attributes
        + mode: `plan` (string) - plan:予定 , history:履歴
        + page: `2` (number) - ページ番号

+ Response 200 (application/json)
    + Attributes(listLives)


### join Live [POST]

指定したライブに参加する

+ Request
    + Attributes
        + live_id: `999` (number) - ライブID

+ Response 200 (application/json)


### leave Live [DELETE]

指定したライブの参加を取り消す

+ Request
    + Attributes
        + live_id: `999` (number) - ライブID

+ Response 200 (application/json)


## User Live Alarms [/v1/users/me/alarms]

### set alarm for Live [POST]

指定したライブの販売開始を通知する設定をON

+ Request
    + Attributes
        + live_id: `999` (number) - ライブID

+ Response 200 (application/json)


### remove alarm for Live [DELETE]

指定したライブの販売開始を通知する設定をOFF

+ Request
    + Attributes
        + live_id: `999` (number) - ライブID

+ Response 200 (application/json)


## User Artists [/v1/users/me/artists]

### List User Artists [GET]
ログイン中のユーザーがフォローしたアーティスト一覧

+ Request
    + Attributes
        + page: `2` (number) - ページ番号

+ Response 200 (application/json)
    + Attributes(listArtists)

### Follow Artists [POST]
指定したアーティストをフォローする

+ Request
    + Attributes
        + artist_id: `1` (number) - アーティストID

+ Response 204 (application/json)


### Unfollow Artists [DELETE]
指定したアーティストをフォロー解除する

+ Request
    + Attributes
        + artist_id: `1` (number) - アーティストID

+ Response 204 (application/json)


## Developer token for AppleMusic [/v1/users/me/artists/apple_music/developer_token]

### get Developer token for AppleMusic [GET]
DeveloperTokenを生成して返す

+ Parameters

+ Response 200 (application/json)
    + Headers
    + Attribute
        + `developer\_token`:`xxxxxxxxxxxxxxxx` (string) - ApleMusicのAPIを使用するためのdeveloper_key


## User Artists with Apple Services [/v1/users/me/artists/apple_services]

### auto follow by apple music & artist_name [POST]
AppleMusicの情報とアーティスト名一覧（ミュージックアプリ用）を使って自動フォローを実行する

+ Request
    + Attributes 
        + user_token: `xxxxx` (string) - AppleMusicUserToken／個人データにアクセスするために使う
        + `artist_names`: `["Mr.Children","きゃりーぱみゅぱみゅ",...]` (array) - フォロー対象となるアーティスト名の配列

+ Response 200 (application/json)


## User Artists with Spotify [/v1/users/me/artists/spotify]

### auto follow by Soitify [POST]
Spotifyの情報を使って自動フォローを実行する

+ Request
    + Attributes 
        + access_token: `xxxxx` (string) - SpotifyAccessToken／個人データにアクセスするために使う

+ Response 200 (application/json)

## User Artists with Twitter [/v1/users/me/artists/twitter]

### auto follow by Twitter [POST]
Twitterの情報を使って自動フォローを実行する

+ Request
    + Attributes 
        + access_token: `xxxxx` (string) - TwitterAccessToken／個人データにアクセスするために使う
        + access_token_secret: `xxxxx` (string) - TwitterAccessTokenSecret／個人データにアクセスするために使う
+ Response 200 (application/json)

## User Notifications [/v1/users/me/notifications]

### get notifications [GET]
ログイン中のユーザーに対する通知を取得する

+ Request
    + Attributes
        + page: `2` (number) - ページ番号

+ Response 200 (application/json)
    + Attributes(listNotifications)


## Lives [/v1/lives]

### List Lives [GET]
ライブの一覧を取得or検索する

+ Request
    + Attributes
        + mode: `plan` (string) - plan:予定 , history:履歴
        + artist_id: `999` (number) - アーティストIDで検索
        + artist_name: `東京スカパラダイスオーケストラ` (string) - アーティスト名で検索
        + artist_status: `1` (number) - アーティストのステータス／2:表示する 1:表示する。ただし地域別リスト対象外は含まない
        + prefecture_code: `13` (number) - 都道府県コード／対応表は https://github.com/toast-id/toast-crawl-manager/wiki/%E9%83%BD%E9%81%93%E5%BA%9C%E7%9C%8C%E3%83%BB%E3%82%A8%E3%83%AA%E3%82%A2 を参照
        + area_code: `5` (number) - 地域コード／対応表は https://github.com/toast-id/toast-crawl-manager/wiki/%E9%83%BD%E9%81%93%E5%BA%9C%E7%9C%8C%E3%83%BB%E3%82%A8%E3%83%AA%E3%82%A2 を参照
        + followed_artist: `1` (number) - フォローしているアーティストが参加するLIVEだけを返す／1: 限定する
        + page: `2` (number) - ページ番号

+ Response 200 (application/json)
    + Attributes(listLives)


## Live [/v1/lives/{id}]

### Get Live [GET]
特定のライブの情報を取得する

+ Parameters
    + id: `999` (number) - ライブID

+ Response 200 (application/json)
    + Attributes(lives)


## Artists [/v1/artists]

### List Artists [GET]
アーティストの一覧を取得or検索する

+ Request
    + Attributes
        + artist_id: `999` (number) - アーティストIDで検索
        + artist_name: `東京スカパラダイスオーケストラ` (string) - アーティスト名で検索 TODO 部分一致？
        + page: `2` (number) - ページ番号

+ Response 200 (application/json)
    + Attributes(listArtists)


## Airtist [/v1/artists/{id}]

### Get Artist [GET]
特定のアーティストの情報を取得する

+ Parameters
    + id: `999` (number) - アーティストID

+ Response 200 (application/json)
    + Attributes(artists)




## コピペ用 [/hoge]

ドキュメント記述時のコピペ用に置いているダミーです

### Sample [GET]

+ Request
    + Attributes (Sample2)

+ Response 200 (application/json)

    + Headers
    + Attributes (Sample1)

+ Response 401 (text/plain)

        There is no such a message for you, dear guest.

# Data Structures

## listLives
+ data (array[lives])
+ first_page_url: `http://toast.dev3.the-triad.jp:55171/api/v1/lives?page=1` (string) - 最初のページのURL
+ prev_page_url: `http://toast.dev3.the-triad.jp:55171/api/v1/lives?page=1` (string) - 前のページのURL
+ current_page: `1` (number) - 現在のページ番号
+ next_page_url: `http://toast.dev3.the-triad.jp:55171/api/v1/lives?page=23` (string) - 次のページのURL
+ last_page: `23` (number) - 最後のページ番号
+ last_page_url: `http://toast.dev3.the-triad.jp:55171/api/v1/lives?page=23` (string) - 最後のページのURL
+ from: `1` (number) - ページ内の最初の並び順番号（IDではなくリスト中の並び順）
+ to: `5` (number) - ページ内の最後の並び順番号（IDではなくリスト中の並び順）
+ total: `114` (number) - リストの内の全個数
+ path: `http://toast.dev3.the-triad.jp:55171/api/v1/lives?page=23` (string) - ベースとなるAPIのURL
+ per_page: `5` (number) - ページあたりの表示件数

## listArtists
+ data (array[artistsSimple])
+ first_page_url: `http://toast.dev3.the-triad.jp:55171/api/v1/lives?page=1` (string) - 最初のページのURL
+ prev_page_url: `http://toast.dev3.the-triad.jp:55171/api/v1/lives?page=1` (string) - 前のページのURL
+ current_page: `1` (number) - 現在のページ番号
+ next_page_url: `http://toast.dev3.the-triad.jp:55171/api/v1/lives?page=23` (string) - 次のページのURL
+ last_page: `23` (number) - 最後のページ番号
+ last_page_url: `http://toast.dev3.the-triad.jp:55171/api/v1/lives?page=23` (string) - 最後のページのURL
+ from: `1` (number) - ページ内の最初の並び順番号（IDではなくリスト中の並び順）
+ to: `5` (number) - ページ内の最後の並び順番号（IDではなくリスト中の並び順）
+ total: `114` (number) - リストの内の全個数
+ path: `http://toast.dev3.the-triad.jp:55171/api/v1/lives?page=23` (string) - ベースとなるAPIのURL
+ per_page: `5` (number) - ページあたりの表示件数

## listNotifications
+ data (array[notifications])
+ first_page_url: `http://toast.dev3.the-triad.jp:55171/api/v1/lives?page=1` (string) - 最初のページのURL
+ prev_page_url: `http://toast.dev3.the-triad.jp:55171/api/v1/lives?page=1` (string) - 前のページのURL
+ current_page: `1` (number) - 現在のページ番号
+ next_page_url: `http://toast.dev3.the-triad.jp:55171/api/v1/lives?page=23` (string) - 次のページのURL
+ last_page: `23` (number) - 最後のページ番号
+ last_page_url: `http://toast.dev3.the-triad.jp:55171/api/v1/lives?page=23` (string) - 最後のページのURL
+ from: `1` (number) - ページ内の最初の並び順番号（IDではなくリスト中の並び順）
+ to: `5` (number) - ページ内の最後の並び順番号（IDではなくリスト中の並び順）
+ total: `114` (number) - リストの内の全個数
+ path: `http://toast.dev3.the-triad.jp:55171/api/v1/lives?page=23` (string) - ベースとなるAPIのURL
+ per_page: `5` (number) - ページあたりの表示件数
+ badge_count: `9` (number) - バッジに表示すべき数

## lives
+ id: `999` (number) - primary key
+ origin: `eplus` (string) - ライブ情報取得元サイト pia, eplus, lawson 　TODO たぶんアプリでは不要、削除「？
+ name: `吉田凜音` (string) -  公演名
+ show_start_at: `July 19, 2018 18:30` (string) - 公演開始日時 
+ doors_open_at: `July 19, 2018 18:00` (string) - 開場開始日時
+ lowest_price: `1900` (number) - チケットの最低価格、ほかテーブルから予め計算
+ prefecture_code: `13` (number) - 都道府県コード／対応表は https://github.com/toast-id/toast-crawl-manager/wiki/%E9%83%BD%E9%81%93%E5%BA%9C%E7%9C%8C%E3%83%BB%E3%82%A8%E3%83%AA%E3%82%A2 を参照
+ area_code: `1` (number) - エリアコード／対応表は https://github.com/toast-id/toast-crawl-manager/wiki/%E9%83%BD%E9%81%93%E5%BA%9C%E7%9C%8C%E3%83%BB%E3%82%A8%E3%83%AA%E3%82%A2 を参照
+ note: `これは備考です` (string) - 備考テキスト／編集はツールから（予定
+ venue_detail_id: `999` (number) - 会場ID
+ venue_detail (venueDetail)
+ count_joined: `99` (number) - ライブの参加人数 
+ is_joined: true (boolean) - 参加する済みかどうか
+ has_alarm: true (boolean) - 通知設定済みかどうか
+ created_at: `June 23, 2018 08:43` (string) - 登録日時 TODO 日付形式要確認
+ updated_at: `June 23, 2018 08:43` (string) - 更新日時 TODO 日付形式要確認
+ artists (array[artists])
+ playguides (array[playguides])
+ badge_count: `9` (number) - バッジに表示すべき数

## venueDetail
+ id: `999` (number) - primary key
+ origin_venue_detail_code: `eplus-hogehoge` (string) - 3社別会場コード
+ title: `新宿RUIDO.K4` (string) - 会場名
+ geo_longitude: `139.704413` (string) - 経度
+ geo_latitude: `35.694762` (string) - 緯度
+ tel: `0352925125` (string) - 電話番号 TODO アプリ側では不要、削除？
+ url: `http://www.ruido.org/k4/` (string) - URL TODO アプリ側では不要、削除？
+ address: `新宿区 歌舞伎町1-2-13 新光ビルb2` (string) - 住所
+ zip: `160-0021` (string) - 郵便番号
+ access: `◆jr山手線「新宿駅」から徒歩 ◆東京メトロ副都心線「新宿三丁目駅」から徒歩` (string) - アクセス
+ stations: `最寄り駅` (string) - 新宿 新宿三丁目
+ created_at: `april 24, 2018 14:23` (string) - 登録日時 TODO 日付形式要確認
+ updated_at: `june 05, 2018 19:17` (string) - 更新日時 TODO 日付形式要確認

## artists
+ id: `999` (number) - primary key
+ origin: `eplus` (string) - ライブ情報取得元サイト pia, eplus, lawson
+ eplus_code: `0000119821` (string) - eplusのコード
+ pia_code: `11018206` (string) - ぴあのコード
+ lawson_code: `` (string) - lawsonのコード
+ thumbnail: `https://hogehoge.com/mogemoge.jpg` (string) - サムネイル画像／artLastFmsから取得予定
+ name: `クリス(ex.TEDDY)` (string) - アーティスト名
+ name_ruby: `clis` (string) - 読み仮名のアルファベット表記（半角・小文字）
+ alphabetical_key: `c` (string) - 並び順用のキー／基本的にはルビの最初の１文字（アルファベット用）／[a-z][0-9]以外は#を入れる
+ thesaurus: `1.G.K,ワンジーケイ,ワンジーケー,KATSU,KATSU(1.G.K)` (string) -  よみがな・ニックネーム等(内部検索用)
+ homepage: `http://1gk-music.com/` (string) - ホームページのURL
+ youtube: `https://www.youtube.com/channel/UCGR0e1RszXH_EgDPv6rpOAQ` (string) - YouTubeのURL
+ facebook: `https://www.facebook.com/1gkband` (string) - FacebookのURL 
+ twitter: `https://twitter.com/1gkband` (string) - twitterのURL
+ profile: `テキサス出身のクリスチャン･メタルコアバンド。` (string) - 紹介文
+ created_at: `april 24, 2018 14:23` (string) - 登録日時 TODO 日付形式要確認
+ updated_at: `june 05, 2018 19:17` (string) - 更新日時 TODO 日付形式要確認
+ count_follower: `1` (number) - フォロワー数
+ is_followed: `true` (boolean) - フォロー済みかどうかのフラグ


## artistsSimple
+ id: `999` (number) - primary key
+ thumbnail: `https://hogehoge.com/mogemoge.jpg` (string) - サムネイル画像／artLastFmsから取得予定
+ name: `クリス(ex.TEDDY)` (string) - アーティスト名
+ name_ruby: `clis` (string) - 読み仮名のアルファベット表記（半角・小文字）
+ alphabetical_key: `c` (string) - 並び順用のキー／基本的にはルビの最初の１文字（アルファベット用）／[a-z][0-9]以外は#を入れる
+ thesaurus: `1.G.K,ワンジーケイ,ワンジーケー,KATSU,KATSU(1.G.K)` (string) -  よみがな・ニックネーム等(内部検索用)
+ created_at: `april 24, 2018 14:23` (string) - 登録日時 TODO 日付形式要確認
+ updated_at: `june 05, 2018 19:17` (string) - 更新日時 TODO 日付形式要確認
+ is_followed: `true` (boolean) - フォロー済みかどうかのフラグ


## playguides
+ id: `999` (number) - primary key 
+ origin: `eplus` (string) - ライブ情報取得元サイト pia, eplus, lawson 
+ live_id: `999` (number) - 紐づくliveのPK
+ playguide_code: `eplus-1620118` (string) -  3社ごとに、同一公演であることを期待して付与したコード／ユニークではない
+ offers (offers)
+ offers_gathered_url: `http://eplus.jp/sys/T1U14P002233228P0030005` (string) -  3社への各チケット申し込みページURL。
+ venue_detail_id: `999` (number) - 紐づくvenueDetailのPK
+ created_at: `april 24, 2018 14:23` (string) - 登録日時 TODO 日付形式要確認
+ updated_at: `june 05, 2018 19:17` (string) - 更新日時 TODO 日付形式要確認
+ tickets (array[tickets])

## offers
+ status: `before-lottery` (string) - 受付状況。紐づくticketsの情報から判断して適切な値を返す／no-information=表示無し、before-lottery=抽選受付前、on-lottery=抽選受付前、before-firstcome=先着受付前、on-firstcome=先着受付中、all-finished=受付終了
+ status_text: `抽選受付前` (string) - 受付状況を表示するための文字列
+ date_text: `10/25(水) 18:00〜` (string) - 受付状況とセットで表示するための日付文字列／受付状況に応じて適切なticketsの日付が使用される

## tickets
+ id: `999` (number) - primary key
+ origin: `eplus` (string) - 取得元サイト pia, eplus, lawson 
+ playguide_id: `999` (number) - 紐づくPlayguideのPK／1つのplayguideに、複数のticketsが紐づく
+ ticket_code: `3537842` (string) - 同一チケット情報であることを期待して付与したコード。　TODO web側ではユニークになるようにするべき？
+ `offer_type` : `first_come` (string) - 先着受付（first_come）、又は抽選受付（lottery）
+ offer_start_at: `June 09, 2018 01:00` (string) - 受付開始日時
+ offer_must_end_at: `July 11, 2018 09:00` (string) - 最遅の受付終了日時
+ created_at: `april 24, 2018 14:23` (string) - 登録日時 TODO 日付形式要確認
+ updated_at: `june 05, 2018 19:17` (string) - 更新日時 TODO 日付形式要確認
+ seats (array[seats])

## seats
+ id: `999` (number) - primary key
+ ticket_id: `999` (number) - 紐づくticketのPK／1つのticketに、複数のseatsが紐づく
+ price: `999` (number) - 価格
+ created_at: `april 24, 2018 14:23` (string) - 登録日時 TODO 日付形式要確認
+ updated_at: `june 05, 2018 19:17` (string) - 更新日時 TODO 日付形式要確認

## user
+ id: `999` (number) - primary key
+ sex: `femail` (string) - 男女 mail:男 femail:女 other:その他
+ birthday: `1999-01-01` - 誕生日
+ prefecture_code: `13` (number) - 都道府県コード／対応表は https://github.com/toast-id/toast-crawl-manager/wiki/%E9%83%BD%E9%81%93%E5%BA%9C%E7%9C%8C%E3%83%BB%E3%82%A8%E3%83%AA%E3%82%A2 を参照

## userEdit
+ id: `999` (number) - primary key
+ sex: `femail` (string) - 男女 mail:男 femail:女 other:その他
+ birthday: `1999-01-01` - 誕生日
+ prefecture_code: `13` (number) - 都道府県コード／対応表は https://github.com/toast-id/toast-crawl-manager/wiki/%E9%83%BD%E9%81%93%E5%BA%9C%E7%9C%8C%E3%83%BB%E3%82%A8%E3%83%AA%E3%82%A2 を参照
+ apns_token: `xxxxxxxxxxxxxxxxxxxx` (string) - APNs用のデバイストークン

## userWithToken
+ id: `999` (number) - primary key
+ sex: `femail` (string) - 男女 mail:男 femail:女 other:その他
+ birthday: `1999-01-01` - 誕生日
+ prefecture_code: `13` (number) - 都道府県コード／対応表は https://github.com/toast-id/toast-crawl-manager/wiki/%E9%83%BD%E9%81%93%E5%BA%9C%E7%9C%8C%E3%83%BB%E3%82%A8%E3%83%AA%E3%82%A2 を参照
+ api_token: `4b38c468a0ce939b2e0e4250af5c51a8f5e43e89cb35e7bd877d4ca1af968ce7` (string) - 認証トークン／このトークンをheaderにつけることで認証を通る／ログインの度に変更される／例）Authorization: Bearer 2ea80763eccfc98a487e14582fd31055b7f05c35e9520ee332462e47ed90790f

## notifications
+ type: `newcomming` (string) - 通知の種類／new_live: 新着ライブ通知、offer_start_lotty:抽選開始通知、offer_start_first_come:先着開始通知
+ message: `東京スカパラダイスオーケストラ がライブ情報を更新しました` (string) - 表示用メッセージ、新着の◯時間前表示以外のメッセージは全てテキスト生成済みで返す／時刻表示はpublish_atから計算して出す
+ artist_id: `1` (number) - アーティストID
+ artists (array[artists])
+ `publish_at`: `July 11, 2018 09:00` (string) - 表示用日時
+ lives (array[lives])

## error
+ status: `404` (number) - ステータスコード／ヘッダーにも同じものが入っている
+ message: `not found` (string) - エラーの内容を示すテキスト

## meta
+ current_page: `1` (number) - 現在のページ番号
+ from: `1` (number) - 最初のページ番号
+ last_page: `1` (number) - 最後のページ番号
+ path: `1` (string) - ベースURL
+ per_page: `15` (number) - 1ページあたりの件数
+ to: `1` (number) - TODO ？
+ total: `1` (number) - TODO ？

## Sample1
+ email: `foo@bar.com` (string) - Email Adress
+ password: `secret` (string) -Password
+ choices (array[Sample2], required)

## Sample2
+ email2: `foo@bar.com` (string) - Email Adress
+ password2: `secret` (string) -Password